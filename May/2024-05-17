2024-05-17

* 학습 목표
- 학습 목표 1 : 가비지 컬렉션

* 새로 배운 내용
주제 1: 가비지 컬렉션
- 자바의 메모리 관리 방법 중의 하나로 JVM의 힙 영역에서 동적으로 할당했던 메모리 중 필요없게 된 메모리 객체를 모아 주기적으로 제거하는 프로세스
- Stop The World : GC를 실행하는 쓰레드를 제외한 나머지 쓰레드는 모두 작업을 멈추는 현상
- 가비지 컬렉션 대상 : 객체가 참조되고 있지 않은 상태
- 가비지 컬렉션 청소 방식 : Mark And Sweep
                      1. Mark : 그래프 순회를 통해 연결된 객체들을 찾아내어 각각 어떤 객체를 참조하고 있는지 찾아서 마킹
                      2. Sweep : unreachable 객체 제거
                      3. Compact : 분산된 객체들을 힙의 시작 주소로 모아 메모리가 할당된 부분과 그렇지 않은 부분으로 압축
- 힙 구조 : young 영역 & old 영역 (힙 전체에서 GC를 진행하지 않고 young 영역에서 GC를 자주 수행함 → 대부분의 garbage가 수거됨 → 메모리 낭비 방지)
- young 영역 : 새로운 객체들이 할당되는 영역 -> young 영역에 대한 가비지 컬렉션을 Minor GC 
- old 영역 : young 영역에서 reachable 상태를 유지하여 살아남은 객체가 복사되는 영역 -> old 영역에 대한 가비지 컬렉션을 Major GC
- Minor GC 동작 순서 : 1. 처음 생성된 객체는 Eden 영역에 위치
                     2. Eden 영역에서 GC가 한번 발생한 후 살아남은 객체는 Survivor 영역 중 하나로 이동
                     3. GC가 발생하면 이미 살아남은 객체가 존재하는 Survivor 영역 중 하나로 이동
                     4. 하나의 Survivor영역이 가득 차게 되면 그 중에서 살아남은 객체를 다른 Survivor 영역으로 이동 
                     5. 처음에 가득 찼던 Survivor 영역은 아무 데이터도 없는 상태로 됨 (Survivor 영역 중 하나는 반드시 비어있는 상태로 있어야함 →  만약에 두 영역에 모두 데이터가 존재하거나 둘다 사용량이 0이면 시스템은 비정상적인 상태임)
                     6. 앞의 과정을 반복하다가 계속 살아남는 객체를 old 영역으로 이동
- Major GC 동작 순서 : 데이터가 가득 차면 GC를 실행, 공간이 크고 가득찼을때 한꺼번에 삭제 GC처리를 하기 때문에 시간이 오래걸림(STW 가 길어짐)

* 내일의 도전 과제
- 도전 과제 1: CLI 프로그램 제작을 위한 클래스 다이어그램 작성 (상속 고려)

* 오늘의 회고
- gc 학습하는 시간이 즐거웠다. 아직 더 깊게 학습 할 필요가 있다. gc 튜닝 ...

* 참고 자료 및 링크
https://d2.naver.com/helloworld/1329

